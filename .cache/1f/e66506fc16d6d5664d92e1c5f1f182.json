{"id":"index.html","dependencies":[{"name":"C:\\Users\\darkl\\Desktop\\wasm_test\\package.json","includedInParent":true,"mtime":1560353248633}],"generated":{"html":"<html>\n\n<head>\n  <script>if (!('WebAssembly' in window)) {\n  var msg = 'WebAssembly not supported';\n  alert(msg);\n  console.error(msg);\n}\n\nvar c_memory = null;\n\nfunction loadWebAssembly(filename, imports) {\n  return fetch(filename).then(function (response) {\n    return response.arrayBuffer();\n  }).then(function (module) {\n    imports = imports || {};\n    imports.env = imports.env || {};\n\n    if (!imports.env.__linear_memory) {\n      // Setup our Memory import, initializing it\n      // to use 256 pages of memory.\n      imports.env.__linear_memory = new WebAssembly.Memory({\n        initial: 10000\n      });\n    }\n\n    if (!imports.env.__indirect_function_table) {\n      // Setup our Table with an inital size of 0,\n      // 'anyfunc' is currently the option here\n      imports.env.__indirect_function_table = new WebAssembly.Table({\n        initial: 0,\n        element: 'anyfunc'\n      });\n    }\n\n    var canvas = document.getElementById('canvas');\n    canvas.width = 600;\n    canvas.height = 400;\n    var gl = canvas.getContext('webgl2');\n\n    function createShader(gl, type, source) {\n      var shader = gl.createShader(type);\n      gl.shaderSource(shader, source);\n      gl.compileShader(shader);\n      var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n      if (success) {\n        return shader;\n      }\n\n      console.log(gl.getShaderInfoLog(shader));\n      gl.deleteShader(shader);\n    }\n\n    function createProgram(gl, vertexShader, fragmentShader) {\n      var program = gl.createProgram();\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      var success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n      if (success) {\n        return program;\n      }\n\n      console.log(gl.getProgramInfoLog(program));\n      gl.deleteProgram(program);\n    }\n\n    function getStringFromC(offset) {\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (length === 0) {\n        var dataView = new DataView(c_memory);\n\n        while (dataView.getUint8(offset + length) !== 0) {\n          length++;\n        }\n      }\n\n      var bytes = new Uint8Array(c_memory, offset, length);\n      var string = new TextDecoder('utf8').decode(bytes);\n      return string;\n    }\n\n    var shaderArray = [];\n\n    imports.env.gl_create_program = function (vertexStr, vertexLength, fragmentStr, fragmentLength) {\n      var shader = createProgram(gl, createShader(gl, gl.VERTEX_SHADER, getStringFromC(vertexStr, vertexLength)), createShader(gl, gl.FRAGMENT_SHADER, getStringFromC(fragmentStr, fragmentLength)));\n      var result = shaderArray.length;\n      shaderArray.push(shader);\n      return result;\n    };\n\n    imports.env.glClearColor = gl.clearColor.bind(gl);\n    imports.env.glClear = gl.clear.bind(gl);\n    var bufferArray = [];\n\n    imports.env.glGenBuffers = function (count, ptr) {\n      var ints = new Int32Array(c_memory, ptr, count);\n\n      for (var i = 0; i < count; i++) {\n        var index = bufferArray.length;\n        bufferArray.push(gl.createBuffer());\n        ints[i] = index;\n      }\n    };\n\n    window.gl = gl;\n    var textureArray = [];\n\n    imports.env.glGenTextures = function (count, ptr) {\n      var ints = new Int32Array(c_memory, ptr, count);\n\n      for (var i = 0; i < count; i++) {\n        var index = textureArray.length;\n        textureArray.push(gl.createTexture());\n        ints[i] = index;\n      }\n    };\n\n    imports.env.glTexParameteri = function (target, param, value) {\n      gl.texParameteri(target, param, value);\n    };\n\n    imports.env.glBindTexture = function (target, textureIndex) {\n      gl.bindTexture(target, textureArray[textureIndex]);\n    };\n\n    imports.env.glTexImage2D = function (target, level, internalformat, width, height, border, format, type, data) {\n      var view = new Uint8Array(c_memory, data, width * height * 4);\n      gl.texImage2D(target, level, internalformat, width, height, border, format, type, view);\n    };\n\n    imports.env.glBindBuffer = function (type, index) {\n      gl.bindBuffer(type, bufferArray[index]);\n    };\n\n    imports.env.glVertexAttribPointer = gl.vertexAttribPointer.bind(gl);\n    imports.env.glEnableVertexAttribArray = gl.enableVertexAttribArray.bind(gl);\n\n    imports.env.glBufferData = function (target, size, ptr, type) {\n      gl.bufferData(target, new Uint8Array(c_memory, ptr, size), type);\n    };\n\n    imports.env.glUseProgram = function (shaderIndex) {\n      gl.useProgram(shaderArray[shaderIndex]);\n    };\n\n    imports.env.glDrawArrays = gl.drawArrays.bind(gl);\n    var locationArray = [];\n\n    imports.env.glGetUniformLocation = function (shaderIndex, namePtr) {\n      var loc = gl.getUniformLocation(shaderArray[shaderIndex], getStringFromC(namePtr));\n      var result = locationArray.length;\n      locationArray.push(loc);\n      return result;\n    };\n\n    imports.env.glUniformMatrix4fv = function (location, count, transpose, value) {\n      for (var i = 0; i < count; i++) {\n        var m4size = 4 * 16;\n        var matrix = new Float32Array(c_memory, value + m4size * i, 16);\n        gl.uniformMatrix4fv(locationArray[location], transpose, matrix);\n      }\n    };\n\n    imports.env.js_print_number = function (num) {\n      console.log(num);\n    };\n\n    imports.env.js_print = function (offset, length) {\n      var string = getStringFromC(offset, length);\n      console.log(string);\n    };\n\n    imports.env.sinf = Math.sin;\n    imports.env.cosf = Math.cos;\n    imports.env.sqrt = Math.sqrt;\n    imports.env.atan2f = Math.atan2;\n    imports.env.roundf = Math.round;\n    fetch('./test.txt').then(function (res) {\n      return res.arrayBuffer();\n    }).then(console.log);\n\n    imports.env.js_http_request = function (endpointPtr, dstPtr, callback) {\n      fetch(endpointPtr).then(function (res) {\n        return res.arrayBuffer();\n      }).then(function (b) {\n        var src = new Uint8Array(b);\n        var dst = new Uint8Array(c_memory, dstPtr, b.byteLength);\n\n        for (var i = 0; i < b.byteLength; i++) {\n          dst[i] = src[i];\n        }\n      });\n    };\n\n    imports.env.js_load_image = function (srcStrPtr, dstPtr, widthPtr, heightPtr) {\n      var src = getStringFromC(srcStrPtr);\n      var image = new Image();\n      image.src = src;\n      var canvas = document.createElement('canvas');\n      var ctx = canvas.getContext('2d');\n\n      image.onload = function () {\n        canvas.width = image.width;\n        canvas.height = image.height;\n        ctx.drawImage(image, 0, 0);\n        var imageData = ctx.getImageData(0, 0, image.width, image.height);\n        var size = image.width * image.height * 4;\n        var dst = new Uint8Array(c_memory, dstPtr, size);\n\n        for (var i = 0; i < imageData.data.length; i++) {\n          dst[i] = imageData.data[i];\n        }\n\n        var widthBytes = new Uint32Array(c_memory, widthPtr, 1);\n        widthBytes[0] = image.width;\n        var heightBytes = new Uint32Array(c_memory, heightPtr, 1);\n        heightBytes[0] = image.height;\n      };\n    }; // Create a WebAssembly instance with our compiled\n    // module and pass in our import object\n\n\n    return WebAssembly.instantiate(module, imports);\n  });\n} // Call our load function.\n\n\nloadWebAssembly('main.wasm').then(function (instance) {\n  // Grab our exports and call our main function\n  var exports = instance.instance.exports;\n  exports.memory.grow(1000);\n  c_memory = exports.memory.buffer;\n  exports.main();\n  var prevTime = 0;\n\n  var loop = function loop() {\n    var time = performance.now();\n    var dt = (time - prevTime) / 1000;\n    prevTime = time;\n    exports.update(canvas.width, canvas.height, dt);\n    requestAnimationFrame(loop);\n  };\n\n  requestAnimationFrame(loop);\n});</script>\n</head>\n\n<body>\n  <canvas id=\"canvas\">\n</canvas></body>\n\n</html>"},"sourceMaps":null,"error":null,"hash":"9bf7a72283ea44e030013ad094459bdb","cacheData":{"env":{}}}